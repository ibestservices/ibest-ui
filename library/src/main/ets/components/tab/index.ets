import { getComponentsInfo, sleep } from '../../assets/ets/utils'
import { IBestTabItem, IBestTabController, TabWidthType } from './index.type'
import { getDefaultBaseStyle, IBEST_UI_NAMESPACE } from '../../theme-chalk/src';
import { IBestUIBaseStyleObjType } from '../../theme-chalk/src/index.type';
import { GRAY_COLOR } from '../../theme-chalk/src/color.type';
@Component
export struct IBestTabs{
    /**
     * 全局公共样式
     */
    @StorageLink(IBEST_UI_NAMESPACE) private baseStyle: IBestUIBaseStyleObjType = getDefaultBaseStyle();
    /**
     * 唯一id
     */
    @Provide uniId: string = ""
    /**
     * 样式类型
     */
    @Provide({allowOverride: "type"}) type: 'line' | 'card' = "line"
    /**
     * tab高度
     */
    @Provide({allowOverride: "tabHeight"}) tabHeight: number = 70
    /**
     * tab宽度类型
     */
    @Provide({allowOverride: "tabWidthType"}) tabWidthType: "auto" | "flex" = "flex"
    /**
     * tab列表
     */
    @Provide({ allowOverride: "tabsList" }) @Watch("tabsListChange") tabsList: IBestTabItem[] = []
    /**
     * 单个tab内边距，单位lpx
     */
    @Provide({allowOverride: "tabPadding"}) tabPadding: number = 16
    /**
     * tab盒子宽度
     */
    @State tabContentWidth: number = 0
    /**
     * tab宽度列表
     */
    @State tabsWidthList: TabWidthType[] = []
    /**
     * 当前激活的tab的name
     */
    @Link @Watch("currentNameChange") currentName: string
    /**
     * 标记线宽度是否固定
     */
    @Prop isTabLineWidthFixed: boolean = false
    /**
     * 标记线宽度，单位lpx
     */
    @Provide({allowOverride: "tabLineWidth"}) tabLineWidth: number = 80
    /**
     * 标记线高度，单位lpx
     */
    @Provide({allowOverride: "tabLineHeight"}) tabLineHeight: number = 4
    /**
     * 标记块宽度
     */
    @State tabBoxWidth: number = 0
    /**
     * 标记线X偏移量
     */
    @State translateX: number = this.tabPadding
    /**
     * 标记块X偏移量
     */
    @State tabBoxTranslateX: number = 0
    /**
     * 未激活的tab文字颜色
     */
    @Provide({allowOverride: "inactiveTextColor"}) inactiveTextColor: ResourceColor = GRAY_COLOR.GRAY_7
    /**
     * 激活的tab文字颜色
     */
    @Provide({allowOverride: "activeTextColor"}) activeTextColor: ResourceColor = GRAY_COLOR.GRAY_8
    /**
     * 标记线颜色
     */
    @Provide({allowOverride: "tabLineColor"}) tabLineColor: ResourceColor = this.baseStyle.primary
    /**
     * 标记线Y偏移量
     */
    @Provide({allowOverride: "lineOffsetY"}) lineOffsetY: number = 0
    /**
     * tab区域背景颜色
     */
    @Provide({allowOverride: "tabBgColor"}) tabBgColor: ResourceColor  = this.baseStyle.default
    /**
     * 字体大小 单位lpx
     */
    @Provide({allowOverride: "fontSize"}) fontSize: number = 28
    /**
     * controller 控制器
     */
    private tabController: IBestTabController = new IBestTabController()
    private scroller: Scroller = new Scroller()
    @State context: UIContext = this.getUIContext()
    /**
     * onChange事件回调
     */
    onChange: ((name: string) => void) | null = null

    aboutToAppear(): void {
        this.uniId = this.getUniqueId().toString()
        if(this.tabController){
            this.tabController.changeTab = (name: string): void => this.changeTab(name)
        }
    }

    onDidBuild(): void {
        this.initSize()
    }
    async initSize(){
        await sleep(30)
        this.getTabsWidth()
        this.getAndSetLineWidth()
    }
    // 列表变化
    tabsListChange(){
        sleep(20).then(() => {
            this.getTabsWidth()
        })
    }
    // tabName 变化
    currentNameChange(){
        if(this.tabsWidthList.length){
            // 获取并改变tabLine的宽度
            this.getAndSetLineWidth()
            // 触发回调函数
            this.onChange && this.onChange(this.currentName)
        }
    }
    // 切换name
    changeTab(name: string){
        if(this.tabsList.some((item: IBestTabItem) => item.name == name)){
            this.currentName = name
        }
    }
    // 获取所有tab的宽度
    getTabsWidth(){
        let tabWidthList: TabWidthType[] = []
        let tabContentInfo = getComponentsInfo(this.context, `tabContent_${this.uniId}`)
        this.tabsList.forEach((item: IBestTabItem) => {
            let boxInfo = getComponentsInfo(this.context, `ibestTab_${this.uniId}_box_${item.name}`)
            let textInfo = getComponentsInfo(this.context, `ibestTab_${this.uniId}_text_${item.name}`)
            tabWidthList.push({
                boxWidth: boxInfo.width,
                boxLocalLeft: boxInfo.localLeft,
                textWidth: textInfo.width
            })
        })
        this.tabsWidthList = tabWidthList
        this.tabContentWidth = tabContentInfo.width
    }
    // 获取并改变line宽度 位置
    getAndSetLineWidth(){
        let index = this.tabsList.findIndex((item: IBestTabItem) => item.name == this.currentName)
        if(index > -1){
            let tabInfo = this.tabsWidthList[index]
            if(this.type == "line"){
                if(!this.isTabLineWidthFixed){
                    this.tabLineWidth = tabInfo.textWidth
                }
                this.translateX = tabInfo.boxLocalLeft + (tabInfo.boxWidth - this.tabLineWidth) / 2
            }else{
                this.tabBoxWidth = tabInfo.boxWidth
                this.tabBoxTranslateX = tabInfo.boxLocalLeft
            }
            if(this.tabWidthType == "auto"){
                this.scroller.scrollTo({
                    xOffset: ((this.type == "line" ? this.translateX : this.tabBoxTranslateX) - this.tabContentWidth/2 + this.tabBoxWidth/2) + "lpx",
                    yOffset: 0,
                    animation: {
                        duration: 100,
                        curve: Curve.FastOutSlowIn
                    }
                })
            }
        }
    }
    build() {
        if(this.tabWidthType == "auto"){
            Scroll(this.scroller){
                IBestTabContent({
                    currentName: $currentName,
                    translateX: this.translateX,
                    tabBoxWidth: this.tabBoxWidth,
                    tabBoxTranslateX: this.tabBoxTranslateX,
                    initSize: (): Promise<void> => this.initSize()
                })
            }
            .scrollable(ScrollDirection.Horizontal)
            .scrollBar(BarState.Off)
            .align(Alignment.Start)
            .layoutWeight(1)
            .constraintSize({ maxHeight: `${this.tabHeight}lpx` })
            .id(`tabContent_${this.uniId}`)
        }else{
            IBestTabContent({
                currentName: $currentName,
                translateX: this.translateX,
                tabBoxWidth: this.tabBoxWidth,
                tabBoxTranslateX: this.tabBoxTranslateX,
                initSize: (): Promise<void> => this.initSize()
            }).id(`tabContent_${this.uniId}`)
        }
    }
}

@Component
struct IBestTabContent{
    /**
     * 全局公共样式
     */
    @StorageLink(IBEST_UI_NAMESPACE) private baseStyle: IBestUIBaseStyleObjType = getDefaultBaseStyle()
    @Link currentName: string
    @Consume type: 'line' | 'card'
    @Consume tabWidthType: "auto" | "flex"
    @Consume tabHeight: number
    @Consume tabsList: IBestTabItem[]
    @Consume tabBgColor: string
    @Consume tabLineWidth: number
    @Consume tabLineHeight: string
    @Consume tabLineColor: string
    @Consume lineOffsetY: number
    @Prop translateX: number
    @Prop tabBoxTranslateX: number
    @Prop tabBoxWidth: number
    initSize: () => Promise<void> = () => new Promise(() => {})
    build() {
        Stack({alignContent: Alignment.BottomStart}){
            // 标记线
            Row()
                .width(`${this.tabLineWidth}lpx`)
                .height(`${this.tabLineHeight}lpx`)
                .backgroundColor(this.tabLineColor)
                .translate({ x: this.translateX + "lpx" })
                .animation({
                    duration: 100,
                    curve: Curve.FastOutSlowIn
                })
                .offset({ y: `-${this.lineOffsetY}lpx` })
                .visibility(this.type == "line" ? Visibility.Visible : Visibility.None)
            // 标记块
            Row()
                .width(`${this.tabBoxWidth + 2}lpx`)
                .height(`${this.tabHeight}lpx`)
                .backgroundColor(this.tabLineColor)
                .translate({ x: this.tabBoxTranslateX + "lpx" })
                .animation({
                    duration: 100,
                    curve: Curve.FastOutSlowIn
                })
                .visibility(this.type == "card" ? Visibility.Visible : Visibility.None)
            Row(){
                ForEach(this.tabsList, (item: IBestTabItem, index: number) => {
                    IBestTab({
                        item: item,
                        index: index,
                        currentName: $currentName,
                        initSize: this.initSize
                    })
                }, (item: string, index: number) => index+'')
            }
            .width(this.tabWidthType == "flex" ? "100%" : "")
            .height(this.tabHeight + "lpx")
            .borderRadius(this.baseStyle.borderRadiusSm)
            .border({ width: this.type == "card" ? "2lpx" : 0, color: this.tabLineColor })
        }
        .width(this.tabWidthType == "flex" ? "100%" : "")
        .backgroundColor(this.tabBgColor)
    }
}

@Component
struct IBestTab{
    /**
     * 全局公共样式
     */
    @StorageLink(IBEST_UI_NAMESPACE) private baseStyle: IBestUIBaseStyleObjType = getDefaultBaseStyle()
    @Consume uniId: string
    @Consume type: 'line' | 'card'
    @Consume tabWidthType: "auto" | "flex"
    @ObjectLink @Watch("itemChange") item: IBestTabItem
    @Prop index: number
    @Link currentName: string
    @Consume tabPadding: number
    @Consume inactiveTextColor: number
    @Consume activeTextColor: number
    @Consume tabLineColor: number
    @Consume fontSize: number
    initSize: () => Promise<void> = () => new Promise(() => {})
    itemChange(){
        this.initSize()
    }
    build() {
        Row() {
            Text(){
                if (this.item.icon) {
                    ImageSpan(this.item.icon)
                        .width(`${this.fontSize}lpx`)
                        .aspectRatio(1)
                        .verticalAlign(ImageSpanAlignment.CENTER)
                        .margin({right: this.baseStyle.spaceBase})
                }
                Span(this.item.label)
                if(typeof this.item.number !== "undefined"){
                    Span(`(${this.item.number})`)
                }
            }
            .height("100%")
            .fontSize(`${this.fontSize}lpx`)
            .fontColor(this.currentName == this.item.name ? this.type == "card" ? "#fff" : this.activeTextColor :
                this.type == "card" ? this.tabLineColor : this.inactiveTextColor)
            .maxLines(1)
            .textOverflow({overflow: TextOverflow.Ellipsis})
            .id(`ibestTab_${this.uniId}_text_${this.item.name}`)
        }
        .justifyContent(FlexAlign.Center)
        .padding({left: this.tabPadding + "lpx", right: this.tabPadding + "lpx"})
        .layoutWeight(this.tabWidthType == "flex" ? 1 : 0)
        .border({ width: { left: this.type == "card" && this.index > 0 ? "2lpx" : 0 }, color: this.tabLineColor })
        .enabled(!this.item.isDisable)
        .opacity(this.item.isDisable ? 0.3 : 1)
        .id(`ibestTab_${this.uniId}_box_${this.item.name}`)
        .onClick(() => {
            this.currentName = this.item.name
        })
    }
}
